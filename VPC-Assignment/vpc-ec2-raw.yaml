AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc with public and private
subnets across two availability zones. It deploys an internet 
gateway and NAT gateway. Also deploy route table.

# The following metadata is used to group the parameters
#Metadata:
#  AWS::CloudFormation::Interface:
#    ParameterGroups:
#      -
#        Label:
#          default: "VPC CIDR"
#        Parameters:
#          - VpcCIDR
#      -
#        Label:
#          default: "Subnet CIDR"
#        Parameters:
#          - PublicSubnet1CIDR
#          - PublicSubnet2CIDR
#          - PrivateSubnet1CIDR
#          - PrivateSubnet2CIDR
#          - PrivateSubnet3CIDR
#          - PrivateSubnet4CIDR
#      -
#        Label:
#          default: "SSH CIDR"
#        Parameters:
#          - SSHLocation
#
# Parameters are used to build flexible CloudFormation templates
Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: 251 public IP addresses for us-east-1a
    Type: String

#  PrivateSubnet1CIDR:
#    Default: 10.0.1.0/24
#    Description: 251 public IP addresses for us-east-1a
#    Type: String

#  SSHLocation:
#    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
#    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
#    Default: 0.0.0.0/0
#    Description: The IP address range that can be used to access the web server using SSH.
#    MaxLength: '18'
#    MinLength: '9'
#    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Assignment-VPC
        - Key: user
          Value: Admin
        - Key: izaan-lesson
          Value: lesson 4.1
        - Key: izaan-lab
          Value: lab 4.1.1

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 | App Tier
      VpcId: !Ref VPC

# Create Security Group for the Application Load Balancer
#  ALBSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: Enable HTTP/HTTPS access on port 80/443
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: '80'
#          ToPort: '80'
#          CidrIp: "0.0.0.0/0"
#        - IpProtocol: tcp
#          FromPort: 443
#          ToPort: 443
#          CidrIp: 0.0.0.0/0
#      Tags:
#        - Key: Name
#          Value: ALB Security Group
#      VpcId: !Ref VPC

# Create Security Group for the Bastion Host aka Jump Box
#  SSHSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: SSH Security Group
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          CidrIp: !Ref SSHLocation
#      Tags:
#        - Key: Name
#          Value: SSH Security Group
#      VpcId: !Ref VPC

# Create Security Group for the Web Server
#  WebServerSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down to the load balancer SG + SSH access via port 22 locked down SSH SG
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: '80'
#          ToPort: '80'
#          SourceSecurityGroupId: !Ref ALBSecurityGroup
#        - IpProtocol: tcp
#          FromPort: 443
#          ToPort: 443
#          SourceSecurityGroupId: !Ref ALBSecurityGroup
#        - IpProtocol: tcp
#          FromPort: '22'
#          ToPort: '22'
#          SourceSecurityGroupId: !Ref SSHSecurityGroup
#      Tags:
#        - Key: Name
#          Value: WebServer Security Group
#      VpcId: !Ref VPC

# Create Security Group for the DataBase
#  DataBaseSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: Open database for access
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: '3306'
#          ToPort: '3306'
#          SourceSecurityGroupId: !Ref WebServerSecurityGroup
#      Tags:
#        - Key: Name
#          Value: DataBase Security Group
#      VpcId: !Ref VPC

Outputs:
# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

# Export Private Subnet 1
#  PrivateSubnet1:
#    Description: Private Subnet 1 ID
#    Export:
#      Name: !Sub ${AWS::StackName}-PrivateSubnet1
#    Value: !Ref PrivateSubnet1

# Export ALB Security Group ID
#  ALBSecurityGroup:
#    Description: Application Load Balancer Security Group ID
#    Export:
#      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
#    Value: !Ref ALBSecurityGroup

# Export SSH Security Group ID
#  SSHSecurityGroup:
#    Description: SSH Security Group ID
#    Export:
#      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
#    Value: !Ref SSHSecurityGroup

# Export WebServer Security Group ID
#  WebServerSecurityGroup:
#    Description: Webserver Security Group ID
#    Export:
#      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
#    Value: !Ref WebServerSecurityGroup

# Export DataBase Security Group ID
#  DataBaseSecurityGroup:
#    Description: DataBase Security Group ID
#    Export:
#      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
#    Value: !Ref DataBaseSecurityGroup